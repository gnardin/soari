/* Generated By:JavaCC: Do not edit this line. SPARQLParserTokenManager.java */
package otservices.translator.language.sparql.parser;
<<<<<<< HEAD

/** Token Manager. */
public class SPARQLParserTokenManager implements SPARQLParserConstants {
	
	/** Debug output. */
	public java.io.PrintStream	debugStream	= System.out;
	
	
	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}
	
	
	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch(pos) {
			case 0:
				if((active0 & 0x2e0L) != 0L) {
					jjmatchedKind = 20;
					return 9;
				}
				if((active0 & 0x100L) != 0L) {
					jjmatchedKind = 20;
					return 6;
				}
				return -1;
			case 1:
				if((active0 & 0x3e0L) != 0L) {
					jjmatchedKind = 20;
					jjmatchedPos = 1;
					return 9;
				}
				return -1;
			case 2:
				if((active0 & 0x3e0L) != 0L) {
					jjmatchedKind = 20;
					jjmatchedPos = 2;
					return 9;
				}
				return -1;
			case 3:
				if((active0 & 0x3e0L) != 0L) {
					jjmatchedKind = 20;
					jjmatchedPos = 3;
					return 9;
				}
				return -1;
			case 4:
				if((active0 & 0x280L) != 0L)
					return 9;
				if((active0 & 0x160L) != 0L) {
					jjmatchedKind = 20;
					jjmatchedPos = 4;
					return 9;
				}
				return -1;
			default:
				return -1;
		}
	}
	
	
	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}
	
	
	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}
	
	
	private int jjMoveStringLiteralDfa0_0() {
		switch(curChar) {
			case 33:
				return jjMoveStringLiteralDfa1_0(0x400000000L);
			case 38:
				return jjMoveStringLiteralDfa1_0(0x40000000L);
			case 40:
				return jjStopAtPos(0, 27);
			case 41:
				return jjStopAtPos(0, 28);
			case 44:
				return jjStopAtPos(0, 37);
			case 46:
				return jjStopAtPos(0, 26);
			case 58:
				return jjStopAtPos(0, 25);
			case 60:
				jjmatchedKind = 31;
				return jjMoveStringLiteralDfa1_0(0x800000000L);
			case 61:
				return jjStopAtPos(0, 33);
			case 62:
				jjmatchedKind = 32;
				return jjMoveStringLiteralDfa1_0(0x1000000000L);
			case 70:
			case 102:
				return jjMoveStringLiteralDfa1_0(0x100L);
			case 82:
			case 114:
				return jjMoveStringLiteralDfa1_0(0x200L);
			case 83:
			case 115:
				return jjMoveStringLiteralDfa1_0(0x20L);
			case 85:
			case 117:
				return jjMoveStringLiteralDfa1_0(0x40L);
			case 87:
			case 119:
				return jjMoveStringLiteralDfa1_0(0x80L);
			case 123:
				return jjStopAtPos(0, 23);
			case 124:
				return jjMoveStringLiteralDfa1_0(0x20000000L);
			case 125:
				return jjStopAtPos(0, 24);
			default:
				return jjMoveNfa_0(3, 0);
		}
	}
	
	
	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch(curChar) {
			case 38:
				if((active0 & 0x40000000L) != 0L)
					return jjStopAtPos(1, 30);
				break;
			case 61:
				if((active0 & 0x400000000L) != 0L)
					return jjStopAtPos(1, 34);
				else if((active0 & 0x800000000L) != 0L)
					return jjStopAtPos(1, 35);
				else if((active0 & 0x1000000000L) != 0L)
					return jjStopAtPos(1, 36);
				break;
			case 69:
			case 101:
				return jjMoveStringLiteralDfa2_0(active0, 0x220L);
			case 72:
			case 104:
				return jjMoveStringLiteralDfa2_0(active0, 0x80L);
			case 73:
			case 105:
				return jjMoveStringLiteralDfa2_0(active0, 0x100L);
			case 80:
			case 112:
				return jjMoveStringLiteralDfa2_0(active0, 0x40L);
			case 124:
				if((active0 & 0x20000000L) != 0L)
					return jjStopAtPos(1, 29);
				break;
			default:
				break;
		}
		return jjStartNfa_0(0, active0);
	}
	
	
	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if(((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch(curChar) {
			case 68:
			case 100:
				return jjMoveStringLiteralDfa3_0(active0, 0x40L);
			case 69:
			case 101:
				return jjMoveStringLiteralDfa3_0(active0, 0x80L);
			case 71:
			case 103:
				return jjMoveStringLiteralDfa3_0(active0, 0x200L);
			case 76:
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x120L);
			default:
				break;
		}
		return jjStartNfa_0(1, active0);
	}
	
	
	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if(((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch(curChar) {
			case 65:
			case 97:
				return jjMoveStringLiteralDfa4_0(active0, 0x40L);
			case 69:
			case 101:
				return jjMoveStringLiteralDfa4_0(active0, 0x220L);
			case 82:
			case 114:
				return jjMoveStringLiteralDfa4_0(active0, 0x80L);
			case 84:
			case 116:
				return jjMoveStringLiteralDfa4_0(active0, 0x100L);
			default:
				break;
		}
		return jjStartNfa_0(2, active0);
	}
	
	
	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if(((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch(curChar) {
			case 67:
			case 99:
				return jjMoveStringLiteralDfa5_0(active0, 0x20L);
			case 69:
			case 101:
				if((active0 & 0x80L) != 0L)
					return jjStartNfaWithStates_0(4, 7, 9);
				return jjMoveStringLiteralDfa5_0(active0, 0x100L);
			case 84:
			case 116:
				return jjMoveStringLiteralDfa5_0(active0, 0x40L);
			case 88:
			case 120:
				if((active0 & 0x200L) != 0L)
					return jjStartNfaWithStates_0(4, 9, 9);
				break;
			default:
				break;
		}
		return jjStartNfa_0(3, active0);
	}
	
	
	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if(((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch(java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch(curChar) {
			case 69:
			case 101:
				if((active0 & 0x40L) != 0L)
					return jjStartNfaWithStates_0(5, 6, 9);
				break;
			case 82:
			case 114:
				if((active0 & 0x100L) != 0L)
					return jjStartNfaWithStates_0(5, 8, 9);
				break;
			case 84:
			case 116:
				if((active0 & 0x20L) != 0L)
					return jjStartNfaWithStates_0(5, 5, 9);
				break;
			default:
				break;
		}
		return jjStartNfa_0(4, active0);
	}
	
	
	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch(java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}
	
	
	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 37;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for(;;) {
			if(++jjround == 0x7fffffff)
				ReInitRounds();
			if(curChar < 64) {
				long l = 1L << curChar;
				do {
					switch(jjstateSet[--i]) {
						case 6:
						case 9:
							if((0xbff400000000000L & l) == 0L)
								break;
							if(kind > 20)
								kind = 20;
							jjCheckNAdd(9);
							break;
						case 3:
							if((0x3ff000000000000L & l) != 0L) {
								if(kind > 14)
									kind = 14;
								jjCheckNAddStates(0, 2);
							} else if(curChar == 45)
								jjCheckNAddTwoStates(33, 34);
							else if(curChar == 43)
								jjCheckNAddTwoStates(28, 29);
							else if(curChar == 36)
								jjAddStates(3, 4);
							else if(curChar == 63)
								jjAddStates(5, 6);
							if((0x3ff000000000000L & l) != 0L) {
								if(kind > 20)
									kind = 20;
								jjCheckNAdd(9);
							}
							break;
						case 8:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 20)
								kind = 20;
							jjCheckNAdd(9);
							break;
						case 12:
							if(curChar == 63)
								jjAddStates(5, 6);
							break;
						case 13:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(14);
							break;
						case 14:
							if((0xbff400000000000L & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(14);
							break;
						case 15:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 12)
								kind = 12;
							jjCheckNAdd(16);
							break;
						case 16:
							if((0xbff400000000000L & l) == 0L)
								break;
							if(kind > 12)
								kind = 12;
							jjCheckNAdd(16);
							break;
						case 17:
							if(curChar == 36)
								jjAddStates(3, 4);
							break;
						case 18:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(19);
							break;
						case 19:
							if((0xbff400000000000L & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(19);
							break;
						case 20:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 13)
								kind = 13;
							jjCheckNAdd(21);
							break;
						case 21:
							if((0xbff400000000000L & l) == 0L)
								break;
							if(kind > 13)
								kind = 13;
							jjCheckNAdd(21);
							break;
						case 22:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 14)
								kind = 14;
							jjCheckNAddStates(0, 2);
							break;
						case 23:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 14)
								kind = 14;
							jjCheckNAdd(23);
							break;
						case 24:
							if((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(24, 25);
							break;
						case 25:
							if(curChar != 46)
								break;
							if(kind > 15)
								kind = 15;
							jjCheckNAdd(26);
							break;
						case 26:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 15)
								kind = 15;
							jjCheckNAdd(26);
							break;
						case 27:
							if(curChar == 43)
								jjCheckNAddTwoStates(28, 29);
							break;
						case 28:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 16)
								kind = 16;
							jjCheckNAdd(28);
							break;
						case 29:
							if((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(29, 30);
							break;
						case 30:
							if(curChar != 46)
								break;
							if(kind > 18)
								kind = 18;
							jjCheckNAdd(31);
							break;
						case 31:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 18)
								kind = 18;
							jjCheckNAdd(31);
							break;
						case 32:
							if(curChar == 45)
								jjCheckNAddTwoStates(33, 34);
							break;
						case 33:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 17)
								kind = 17;
							jjCheckNAdd(33);
							break;
						case 34:
							if((0x3ff000000000000L & l) != 0L)
								jjCheckNAddTwoStates(34, 35);
							break;
						case 35:
							if(curChar != 46)
								break;
							if(kind > 19)
								kind = 19;
							jjCheckNAdd(36);
							break;
						case 36:
							if((0x3ff000000000000L & l) == 0L)
								break;
							if(kind > 19)
								kind = 19;
							jjCheckNAdd(36);
							break;
						default:
							break;
					}
				} while(i != startsAt);
			} else if(curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch(jjstateSet[--i]) {
						case 6:
							if((0x7fffffeaffffffeL & l) != 0L) {
								if(kind > 20)
									kind = 20;
								jjCheckNAdd(9);
							}
							if((0x200000002L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 5;
							break;
						case 3:
							if((0x7fffffe8ffffffeL & l) != 0L) {
								if(kind > 20)
									kind = 20;
								jjCheckNAdd(9);
							}
							if((0x7fffffe87fffffeL & l) != 0L) {
								if(kind > 21)
									kind = 21;
							}
							if((0x7fffffe07fffffeL & l) != 0L) {
								if(kind > 22)
									kind = 22;
							}
							if((0x4000000040L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 6;
							else if((0x10000000100000L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 2;
							break;
						case 0:
							if((0x2000000020L & l) != 0L && kind > 10)
								kind = 10;
							break;
						case 1:
							if((0x20000000200000L & l) != 0L)
								jjCheckNAdd(0);
							break;
						case 2:
							if((0x4000000040000L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 1;
							break;
						case 4:
							if((0x8000000080000L & l) != 0L)
								jjCheckNAdd(0);
							break;
						case 5:
							if((0x100000001000L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 4;
							break;
						case 7:
							if((0x4000000040L & l) != 0L)
								jjstateSet[jjnewStateCnt++] = 6;
							break;
						case 8:
							if((0x7fffffe8ffffffeL & l) == 0L)
								break;
							if(kind > 20)
								kind = 20;
							jjCheckNAdd(9);
							break;
						case 9:
							if((0x7fffffeaffffffeL & l) == 0L)
								break;
							if(kind > 20)
								kind = 20;
							jjCheckNAdd(9);
							break;
						case 10:
							if((0x7fffffe87fffffeL & l) != 0L && kind > 21)
								kind = 21;
							break;
						case 11:
							if((0x7fffffe07fffffeL & l) != 0L && kind > 22)
								kind = 22;
							break;
						case 13:
							if((0x7fffffe8ffffffeL & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(14);
							break;
						case 14:
							if((0x7fffffeaffffffeL & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(14);
							break;
						case 15:
							if((0x7fffffe8ffffffeL & l) == 0L)
								break;
							if(kind > 12)
								kind = 12;
							jjCheckNAdd(16);
							break;
						case 16:
							if((0x7fffffeaffffffeL & l) == 0L)
								break;
							if(kind > 12)
								kind = 12;
							jjCheckNAdd(16);
							break;
						case 18:
							if((0x7fffffe8ffffffeL & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(19);
							break;
						case 19:
							if((0x7fffffeaffffffeL & l) == 0L)
								break;
							if(kind > 11)
								kind = 11;
							jjCheckNAdd(19);
							break;
						case 20:
							if((0x7fffffe8ffffffeL & l) == 0L)
								break;
							if(kind > 13)
								kind = 13;
							jjCheckNAdd(21);
							break;
						case 21:
							if((0x7fffffeaffffffeL & l) == 0L)
								break;
							if(kind > 13)
								kind = 13;
							jjCheckNAdd(21);
							break;
						default:
							break;
					}
				} while(i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch(jjstateSet[--i]) {
						default:
							break;
					}
				} while(i != startsAt);
			}
			if(kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch(java.io.IOException e) {
				return curPos;
			}
		}
	}
	
	static final int[]						jjnextStates				= {23, 24, 25, 18, 20, 13,
			15,																						};
	
	/** Token literal values. */
	public static final String[]	jjstrLiteralImages	= {"", null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, "\173", "\175", "\72", "\56",
			"\50", "\51", "\174\174", "\46\46", "\74", "\76", "\75", "\41\75",
			"\74\75", "\76\75", "\54",										};
	
	/** Lexer state names. */
	public static final String[]	lexStateNames				= {"DEFAULT",};
	
	static final long[]						jjtoToken						= {0x3fffffffe1L,};
	
	static final long[]						jjtoSkip						= {0x1eL,};
	
	protected SimpleCharStream		input_stream;
	
	private final int[]						jjrounds						= new int[37];
	
	private final int[]						jjstateSet					= new int[74];
	
	protected char								curChar;
	
	
	/** Constructor. */
	public SPARQLParserTokenManager(SimpleCharStream stream) {
		if(SimpleCharStream.staticFlag)
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}
	
	
	/** Constructor. */
	public SPARQLParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}
	
	
	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}
	
	
	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for(i = 37; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}
	
	
	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}
	
	
	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if(lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}
	
	
	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);
		
		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;
		
		return t;
	}
	
	int	curLexState			= 0;
	
	int	defaultLexState	= 0;
	
	int	jjnewStateCnt;
	
	int	jjround;
	
	int	jjmatchedPos;
	
	int	jjmatchedKind;
	
	
	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;
		
		EOFLoop: for(;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch(java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}
			
			try {
				input_stream.backup(0);
				while(curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch(java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if(jjmatchedKind != 0x7fffffff) {
				if(jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch(java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if(curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if(!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column,
					error_after, curChar, TokenMgrError.LEXICAL_ERROR);
		}
	}
	
	
	private void jjCheckNAdd(int state) {
		if(jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}
	
	
	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while(start++ != end);
	}
	
	
	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}
	
	
	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while(start++ != end);
	}
	
=======
import java.util.ArrayList;
import java.util.List;
import otservices.translator.language.LanguageException;
import otservices.translator.language.LanguageInterface;
import otservices.translator.language.sparql.SPARQLObject;
import otservices.translator.language.sparql.LogExpr;
import otservices.translator.language.sparql.RegExpr;
import otservices.translator.language.sparql.RelExpr;
import otservices.translator.language.sparql.Term;
import otservices.translator.language.sparql.Result;
import otservices.translator.language.sparql.Where;
import otservices.translator.language.sparql.Filter;

/** Token Manager. */
public class SPARQLParserTokenManager implements SPARQLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2e0L) != 0L)
         {
            jjmatchedKind = 20;
            return 9;
         }
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 20;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0x3e0L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
            return 9;
         }
         return -1;
      case 2:
         if ((active0 & 0x3e0L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
            return 9;
         }
         return -1;
      case 3:
         if ((active0 & 0x3e0L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
            return 9;
         }
         return -1;
      case 4:
         if ((active0 & 0x280L) != 0L)
            return 9;
         if ((active0 & 0x160L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
            return 9;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 44:
         return jjStopAtPos(0, 37);
      case 46:
         return jjStopAtPos(0, 26);
      case 58:
         return jjStopAtPos(0, 25);
      case 60:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 61:
         return jjStopAtPos(0, 33);
      case 62:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 123:
         return jjStopAtPos(0, 23);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 125:
         return jjStopAtPos(0, 24);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 61:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x220L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 124:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x120L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x220L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 69:
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 88:
      case 120:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 9);
         break;
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 9);
         break;
      case 84:
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 9:
                  if ((0xbff400000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(9);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 43)
                     jjCheckNAddTwoStates(28, 29);
                  else if (curChar == 36)
                     jjAddStates(3, 4);
                  else if (curChar == 63)
                     jjAddStates(5, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(9);
                  }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(9);
                  break;
               case 12:
                  if (curChar == 63)
                     jjAddStates(5, 6);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xbff400000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0xbff400000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 36)
                     jjAddStates(3, 4);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0xbff400000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0xbff400000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 43)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 46)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar != 46)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(9);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 3:
                  if ((0x7fffffe8ffffffeL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(9);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 1:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 13:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x7fffffe8ffffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffeaffffffeL & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjCheckNAdd(21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   23, 24, 25, 18, 20, 13, 15, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\173", "\175", "\72", 
"\56", "\50", "\51", "\174\174", "\46\46", "\74", "\76", "\75", "\41\75", "\74\75", 
"\76\75", "\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[37];
private final int[] jjstateSet = new int[74];
protected char curChar;
/** Constructor. */
public SPARQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SPARQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

>>>>>>> 181e5e943b8d63ecfeef46d9e31900f14099ac05
}
